name: CI/CD Pipeline Website Helm

on:
  push:
    branches:
      - 'staging'
      - 'production'

jobs:
  ## Build image
  build:
    runs-on: arc-runner-set
    steps:
      ## Ensure Docker is running
      - name: Wait for Docker
        run: until docker info > /dev/null 2>&1; do echo "Waiting for Docker..."; sleep 2; done

      ## Log in to Docker registry using doctl
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCKER_DO_REGISTRY_TOKEN }}

      - name: Login to Docker registry using doctl
        run: doctl registry login --expiry-seconds 600

      ## Pull the latest image if it exists
      - name: Pull latest image
        run: docker pull ${{ vars.DOCKER_DO_REGISTRY }}/${{ github.event.repository.name }}:latest || true

      ## Build Docker image with caching from previous builds
      - name: Build Docker image
        run: |
          docker build \
            --pull \
            --cache-from ${{ vars.DOCKER_DO_REGISTRY }}/${{ github.event.repository.name }}:latest \
            --tag ${{ vars.DOCKER_DO_REGISTRY }}/${{ github.event.repository.name }}:${{ github.sha }} \
            --tag ${{ vars.DOCKER_DO_REGISTRY }}/${{ github.event.repository.name }}:${{ github.ref_name }} \
            --tag ${{ vars.DOCKER_DO_REGISTRY }}/${{ github.event.repository.name }}:latest \
            --build-arg SSH_PRIVATE_KEY="${{ secrets.SSH_PRIVATE_KEY }}" \
            .

      ## Push Docker image with all tags
      - name: Push Docker image
        run: docker push ${{ vars.DOCKER_DO_REGISTRY }}/${{ github.event.repository.name }} --all-tags

  ## Deploy to Staging Environment
  deploy-staging:
    if: github.ref_name == 'staging'
    runs-on: arc-runner-set
    needs: [ build ]
    steps:
      ## Ensure Docker is running
      - name: Wait for Docker
        run: until docker info > /dev/null 2>&1; do echo "Waiting for Docker..."; sleep 2; done

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCKER_DO_REGISTRY_TOKEN }}

      - name: Login to Docker registry using doctl
        run: doctl registry login --expiry-seconds 600

      ## Pull the image for the current commit SHA and tag it as staging
      - run: docker pull ${{ vars.DOCKER_DO_REGISTRY }}/${{ github.event.repository.name }}:${{ github.sha }}
      - run: docker tag ${{ vars.DOCKER_DO_REGISTRY }}/${{ github.event.repository.name }}:${{ github.sha }} ${{ vars.DOCKER_DO_REGISTRY }}/${{ github.event.repository.name }}:staging
      - run: docker push ${{ vars.DOCKER_DO_REGISTRY }}/${{ github.event.repository.name }}:staging

      ## Deploy to Kubernetes using Helm
      - name: Deploy to Staging
        run: sh /entrypoint.sh
        env:
          KUBE_URL: ${{ secrets.KUBE_URL_STAGING }}
          KUBE_TOKEN: ${{ secrets.KUBE_TOKEN_STAGING }}
          HELM_VALUES: helm/staging/default.yaml

  ## Deploy to Production Environment
  deploy-production:
    if: github.ref_name == 'production'
    runs-on: arc-runner-set
    needs: [ build ]
    steps:
      ## Ensure Docker is running
      - name: Wait for Docker
        run: until docker info > /dev/null 2>&1; do echo "Waiting for Docker..."; sleep 2; done

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCKER_DO_REGISTRY_TOKEN }}

      - name: Login to Docker registry using doctl
        run: doctl registry login --expiry-seconds 600

      ## Pull the image for the current commit SHA and tag it as production
      - run: docker pull ${{ vars.DOCKER_DO_REGISTRY }}/${{ github.event.repository.name }}:${{ github.sha }}
      - run: docker tag ${{ vars.DOCKER_DO_REGISTRY }}/${{ github.event.repository.name }}:${{ github.sha }} ${{ vars.DOCKER_DO_REGISTRY }}/${{ github.event.repository.name }}:production
      - run: docker push ${{ vars.DOCKER_DO_REGISTRY }}/${{ github.event.repository.name }}:production

      ## Deploy to Kubernetes using Helm
      - name: Deploy to Production
        run: sh /entrypoint.sh
        env:
          KUBE_URL: ${{ secrets.KUBE_URL_PRODUCTION }}
          KUBE_TOKEN: ${{ secrets.KUBE_TOKEN_PRODUCTION }}
          HELM_VALUES: helm/production/default.yaml